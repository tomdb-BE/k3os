#!/bin/bash
set -e

export SCRIPTS=/usr/libexec/rke2os
export RKE2OS_SYSTEM=/.base/rke2os/system

reinit_debug()
{
    if [ "$RKE2OS_DEBUG" = "true" ]; then
        set -x
        return 0
    fi

    if [ -e /run/rke2os/debug ]; then
        set -x
        return 0
    fi

    if [ -e /proc/cmdline ]; then
        for x in $(cat /proc/cmdline); do
            case $x in
                rke2os.debug*)
                    export RKE2OS_DEBUG=true
                    mkdir -p /run/rke2os
                    echo debug > /run/rke2os/debug || true
                    ;;
            esac
        done
    fi

    if [ "$RKE2OS_DEBUG" = "true" ]; then
        set -x
    fi
}

setup_kernel()
{
    KERNEL=${RKE2OS_SYSTEM}/kernel/$(uname -r)/kernel.squashfs
    if [ ! -e ${KERNEL} ]; then
        return 0
    fi

    mkdir -p /run/rke2os/kernel
    mount -t squashfs $KERNEL /run/rke2os/kernel

    mount --bind /run/rke2os/kernel/lib/modules /lib/modules
    mount --bind /run/rke2os/kernel/lib/firmware /lib/firmware
    mount --bind /run/rke2os/kernel/headers /usr/src

    umount /run/rke2os/kernel
}

perr()
{
    echo "[ERROR]" "$@" 1>&2
}

pfatal()
{
    echo "[FATAL]" "$@" 1>&2
    exit 1
}

pinfo()
{
    echo " * " "$@"
}

cleanup()
{
    rm -rf /run/rke2os
    unset SCRIPTS
    unset RKE2OS_SYSTEM
    if [ -n "$RKE2OS_MODE" ]; then
        mkdir -p /run/rke2os
        echo "$RKE2OS_MODE" > /run/rke2os/mode
    fi
    unset RKE2OS_MODE
}

reinit_debug
